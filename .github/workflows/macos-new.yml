name: MacOS - Ngrok

on: workflow_dispatch

env:
  NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}
  VNC_PASS: p@ssw0rd!

defaults:
  run:
    shell: bash

jobs:
  ngrok-rdp:
    runs-on: macos-15
    timeout-minutes: 360
    steps:
      - name: Enable Screen Sharing
        run: |
          # Disable spotlight indexing
          sudo mdutil -i off -a
          
          # Disable sleep modes
          sudo systemsetup -setdisplaysleep Off -setsleep Off -setcomputersleep Off 2>&-

          # Disable display sleep and disable screensaver password
          sudo pmset -a displaysleep 0
          sudo defaults write /Library/Preferences/com.apple.screensaver askForPassword -int 0

          # Disables automatic termination of inactive apps
          defaults write NSGlobalDomain NSDisableAutomaticTermination -bool true

          # Disable Screen-Lock
          defaults write com.apple.loginwindow DisableScreenLock -bool true
          defaults write com.apple.loginwindow AllowList -string '*'

          # Disable automatic log-out
          sudo defaults write GlobalPreferences com.apple.autologout.AutoLogOutDelay 0

          # Disables reading/writing .DS_Stores on SMB network shares
          # @see https://support.apple.com/en-us/HT208209
          defaults write com.apple.desktopservices DSDontWriteNetworkStores -bool true
          
          # Enable subpixel font rendering for non-Apple LCDs
          defaults write NSGlobalDomain AppleFontSmoothing -int 1

          # Enable Screen Sharing
          sudo defaults write /Library/Preferences/com.apple.RemoteManagement ARDEnabled -bool true
          sudo defaults write /Library/Preferences/com.apple.RemoteManagement Enabled -bool true
          sudo defaults write /Library/Preferences/com.apple.ScreenSharing Enabled -bool true

          # Grant screen recording and accessibility to ARDAgent and Screen Sharing
          TCC_DB="/Library/Application Support/com.apple.TCC/TCC.db"
          
          sudo sqlite3 "$TCC_DB" <<EOF
          REPLACE INTO access 
          (service, client, client_type, auth_value, auth_reason, auth_version, csreq, policy_id, indirect_object_identifier_type, indirect_object_identifier, flags, last_modified)
          VALUES 
          ('kTCCServiceScreenCapture','/System/Library/CoreServices/RemoteManagement/ARDAgent.app',1,2,1,1,NULL,NULL,NULL,NULL,0,strftime('%s','now')),
          ('kTCCServiceScreenCapture','com.apple.screensharing',0,2,1,1,NULL,NULL,NULL,NULL,0,strftime('%s','now')),
          ('kTCCServiceAccessibility','/System/Library/CoreServices/RemoteManagement/ARDAgent.app',1,2,1,1,NULL,NULL,NULL,NULL,0,strftime('%s','now')),
          ('kTCCServiceAccessibility','com.apple.screensharing',0,2,1,1,NULL,NULL,NULL,NULL,0,strftime('%s','now'));
          EOF

          # Verify Screen Sharing is enabled (alternative check)
          if ! defaults read /Library/Preferences/com.apple.ScreenSharing 2>/dev/null | grep -q "Enabled = 1"; then
            echo "Warning: Screen Sharing may not be enabled. Checking process status..."
            if ! pgrep -f "ScreensharingAgent" >/dev/null; then
              echo "Error: Screen Sharing process (ScreensharingAgent) is not running."
              # Attempt to restart Screen Sharing
              sudo launchctl unload /System/Library/LaunchDaemons/com.apple.screensharing.plist 2>/dev/null
              sudo launchctl load /System/Library/LaunchDaemons/com.apple.screensharing.plist
              sleep 5
              if ! pgrep -f "ScreensharingAgent" >/dev/null; then
                echo "Error: Failed to start Screen Sharing process."
                exit 1
              fi
            fi
          fi

          # Log TCC database status for debugging
          echo "TCC database entries for screen capture:"
          sudo sqlite3 /Library/Application\ Support/com.apple.TCC/TCC.db \
            "SELECT * FROM access WHERE service = 'kTCCServiceScreenCapture';" || echo "Warning: Failed to query TCC database."

          # Enable VNC
          echo "Enabling VNC..."
          sudo /System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart \
            -activate \
            -configure \
            -access -on \
            -clientopts -setvnclegacy -vnclegacy yes \
            -clientopts -setvncpw -vncpw "$VNC_PASS" \
            -restart -agent \
            -privs -all
            
          # Keep the session alive (caffeinate prevents idle sleep)
          caffeinate -dimsu &>/dev/null &

      - name: Install and Configure Ngrok
        run: |
          brew install --cask ngrok
          ngrok authtoken $NGROK_AUTH_TOKEN

      - name: Start Ngrok Tunnel
        run: |
          max_retries=3
          retry_count=0
          success=false

          while [ $success = false ] && [ $retry_count -lt $max_retries ]; do
            ngrok tcp 5900 &
            ngrok_pid=$!

            attempts=0
            max_attempts=10
            ngrok_url=""
            while [ -z "$ngrok_url" ] && [ $attempts -lt $max_attempts ]; do
              sleep 5
              attempts=$((attempts + 1))
              ngrok_url=$(curl -s http://localhost:4040/api/tunnels | jq -r '.tunnels[] | select(.proto == "tcp") | .public_url' 2>/dev/null)
            done

            if [ -z "$ngrok_url" ]; then
              echo "Failed to retrieve Ngrok URL after $max_attempts attempts."
              retry_count=$((retry_count + 1))
              kill $ngrok_pid
              continue
            fi

            ngrok_url=${ngrok_url#tcp://}
            address=${ngrok_url%:*}
            port=${ngrok_url#*:}

            if nc -z -w 5 $address $port; then
              success=true
              echo "VNC Connection Details"
              echo "URL: $address:$port"
            else
              echo "Connection test failed. Retrying..."
              kill $ngrok_pid
              retry_count=$((retry_count + 1))
              sleep 5
            fi
          done

          if [ $success = false ]; then
            echo "Failed to establish a working Ngrok tunnel after $max_retries attempts."
            exit 1
          fi

      - name: Keep Alive
        run: |
          duration=21600  # 6 hours in seconds
          interval=300    # 5 minutes in seconds
          end_time=$(( $(date +%s) + duration ))

          while [ $(date +%s) -lt $end_time ]; do
            if ! pgrep -f "ngrok tcp 5900" > /dev/null; then
              echo "Ngrok process not found. Exiting workflow."
              exit 1
            fi
            sleep $interval
          done

      - name: Cleanup
        if: always()
        run: |
          if pgrep -f "ngrok tcp 5900" > /dev/null; then
            echo "Terminating Ngrok process..."
            pkill -f "ngrok tcp 5900"
          fi
          echo "Cleanup complete."
