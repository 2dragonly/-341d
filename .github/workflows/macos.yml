name: MacOS - Ngrok

on: workflow_dispatch

env:
  NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}
  RDP_USER: admin
  RDP_PASS: p@ssw0rd!

defaults:
  run:
    shell: bash

jobs:
  ngrok-rdp:
    runs-on: macos-14
    timeout-minutes: 360
    steps:
      - name: Setup MacOS Remote Desktop
        run: |
          # Disable spotlight indexing
          sudo mdutil -i off -a
          
          # Disable sleep modes
          sudo systemsetup -setdisplaysleep Off -setsleep Off -setcomputersleep Off 2>&-

          # Create new account
          sudo dscl . -create /Users/$RDP_USER
          sudo dscl . -create /Users/$RDP_USER UserShell /bin/bash
          sudo dscl . -create /Users/$RDP_USER RealName "$RDP_USER"
          sudo dscl . -create /Users/$RDP_USER UniqueID 1001
          sudo dscl . -create /Users/$RDP_USER PrimaryGroupID 80
          sudo dscl . -create /Users/$RDP_USER NFSHomeDirectory /Users/$RDP_USER
          sudo dscl . -passwd /Users/$RDP_USER $RDP_PASS
          
          sudo mkdir -p /Users/$RDP_USER
          sudo chown $VNC_USER:staff /Users/$RDP_USER
          sudo dscl . -append /Groups/admin GroupMembership $RDP_USER

          # Skip GUI login screen
          sudo defaults write /Library/Preferences/com.apple.loginwindow autoLoginUser -string "$RDP_USER"
          sudo defaults write /Library/Preferences/com.apple.loginwindow autoLoginUserScreenLocked -bool false

          # Disable SIP protections
          sudo nvram boot-args="serverperfmode=1 amfi_get_out_of_my_way=1 $(nvram boot-args 2>/dev/null | cut -f 2-)"

          # Enables osascript over SSH without keygen and fulldiskaccess warnings
          sudo defaults write com.apple.universalaccessAuthWarning /System/Applications/Utilities/Terminal.app -bool true
          sudo defaults write com.apple.universalaccessAuthWarning /usr/libexec -bool true
          sudo defaults write com.apple.universalaccessAuthWarning /usr/libexec/sshd-keygen-wrapper -bool true
          sudo defaults write com.apple.universalaccessAuthWarning com.apple.Terminal -bool true
          
          # Define known app paths
          declare -A APP_PATHS=(
            ["Terminal"]="/System/Applications/Utilities/Terminal.app"
            ["ARDAgent"]="/System/Library/CoreServices/RemoteManagement/ARDAgent.app"
            ["screencapture"]="/usr/sbin/screencapture"
          )
          
          function getAppFullPath {
              local app_name="$1"
              
              # Check if we have a predefined path
              if [[ -n "${APP_PATHS[$app_name]}" ]]; then
                  echo "${APP_PATHS[$app_name]}"
                  return
              fi
              
              # Fallback to mdfind search
              local app_path=$(mdfind "kMDItemKind == 'Application'" | grep -i "$app_name.app" | head -n 1)
              if [[ -z "$app_path" ]]; then
                  app_path="/System/Library/CoreServices/$app_name.app"
              fi
              echo "$app_path"
          }
          function getAppBundleIdentifier {
              local app=$(getAppFullPath "$1")
              # For executables like screencapture, use reverse DNS style identifier
              if [[ "$app" == *".app" ]]; then
                  mdls -name kMDItemCFBundleIdentifier -r "$app"
              else
                  echo "com.apple.$1"
              fi
          }
          function getCsreqBlob {
              local app=$(getAppFullPath "$1")
              
              # For system executables, use the anchor apple requirement
              if [[ ! -e "$app" ]]; then
                  echo "anchor apple" | csreq -r- -b /tmp/csreq.bin
                  local hex_blob=$(xxd -p /tmp/csreq.bin | tr -d '\n')
                  rm -f /tmp/csreq.bin
                  echo "$hex_blob"
                  return
              fi
              
              # Get the requirement string from codesign
              local req_str=$(codesign -d -r- "$app" 2>&1 | awk -F ' => ' '/designated/{print $2}')
              if [[ -z "$req_str" ]]; then
                  # Fall back to anchor apple for system apps
                  req_str="anchor apple"
              fi
              echo "$req_str" | csreq -r- -b /tmp/csreq.bin
              local hex_blob=$(xxd -p /tmp/csreq.bin | tr -d '\n')
              rm -f /tmp/csreq.bin
              echo "$hex_blob"
          }
          function updateTCC {
              local service="$1"
              local app_identifier="$2"
              local app_csreq_blob="$3"
              local dbPath="/Library/Application Support/com.apple.TCC/TCC.db"
          
              # Check if entry already exists
              local exist=$(sudo sqlite3 "$dbPath" "select count(*) from access where service = '$service' and client = '$app_identifier';")
              echo "'$service' [-] '$app_identifier' [-] '$app_csreq_blob'"
              if [[ "$exist" -gt 0 ]]; then
                  echo "'$app_identifier' is already have access!"
              else
                  # Updated for macOS Sonoma TCC schema (17 columns)
                  sudo sqlite3 "$dbPath" \
                    "INSERT OR IGNORE INTO access VALUES('$service', '$app_identifier', 0, 2, 3, 1, '$app_csreq_blob', NULL, 0, 'UNUSED', NULL, 0, CAST(strftime('%s','now') AS INTEGER), NULL, NULL, NULL, NULL);"
              fi
          }
          function giveFullDiskAccessPermission {
              local app_name="$1"
              local app_identifier=$(getAppBundleIdentifier "$app_name")
              local app_csreq_blob=$(getCsreqBlob "$app_name")
              updateTCC "kTCCServiceSystemPolicyAllFiles" "$app_identifier" "$app_csreq_blob"
          }
          function giveScreenRecordingPermission {
              local app_name="$1"
              local app_identifier=$(getAppBundleIdentifier "$app_name")
              local app_csreq_blob=$(getCsreqBlob "$app_name")
              updateTCC "kTCCServiceScreenCapture" "$app_identifier" "$app_csreq_blob"
          }
          
          # Grant necessary permissions for VNC
          giveFullDiskAccessPermission "ARDAgent"
          giveScreenRecordingPermission "ARDAgent"
          giveFullDiskAccessPermission "screencapture"
          giveScreenRecordingPermission "screencapture"
          
          # Enable VNC
          sudo /System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart \
            -configure -allowAccessFor -allUsers -privs -all -clientopts -setvnclegacy -vnclegacy yes
          sudo /System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart \
            -configure -clientopts -setvncpw -vncpw "$RDP_PASS"
          echo $RDP_PASS | perl -we 'BEGIN { @k = unpack "C*", pack "H*", "1734516E8BA8C5E2FF1C39567390ADCA"}; $_ = <>; chomp; s/^(.{8}).*/$1/; @p = unpack "C*", $_; foreach (@k) { printf "%02X", $_ ^ (shift @p || 0) }; print "\n"' | sudo tee /Library/Preferences/com.apple.VNCSettings.txt

          # Start VNC/reset changes
          sudo /System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart -restart -agent -console
          sudo /System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart -activate

          # Disable transparency in the menu bar and elsewhere
          defaults write com.apple.universalaccess reduceTransparency -bool true

          # Reduce Motion & Transparency
          defaults write com.apple.Accessibility DifferentiateWithoutColor -int 1
          defaults write com.apple.Accessibility ReduceMotionEnabled -int 1
          defaults write com.apple.universalaccess reduceMotion -int 1
          defaults write com.apple.universalaccess reduceTransparency -int 1
          defaults write com.apple.Accessibility ReduceMotionEnabled -int 1

          # Enable subpixel font rendering for non-Apple LCDs
          defaults write NSGlobalDomain AppleFontSmoothing -int 1

          # Enable Performance mode
          sudo nvram boot-args="serverperfmode=1 $(nvram boot-args 2>/dev/null | cut -f 2-)"

          # Enable Multi-Session
          sudo /usr/bin/defaults write .GlobalPreferences MultipleSessionsEnabled -bool TRUE
          defaults write "Apple Global Domain" MultipleSessionsEnabled -bool true

          # Disable Screen-Lock
          defaults write com.apple.loginwindow DisableScreenLock -bool true
          defaults write com.apple.loginwindow AllowList -string '*'

          # Disables automatic termination of inactive apps
          defaults write NSGlobalDomain NSDisableAutomaticTermination -bool true

          # Disable automatic log-out
          sudo defaults write GlobalPreferences com.apple.autologout.AutoLogOutDelay 0

          # Disable display sleep and disable screensaver password
          sudo pmset -a displaysleep 0
          sudo defaults write /Library/Preferences/com.apple.screensaver askForPassword -int 0

          # Disables reading/writing .DS_Stores on SMB network shares
          # @see https://support.apple.com/en-us/HT208209
          defaults write com.apple.desktopservices DSDontWriteNetworkStores -bool true

          # Keep the session alive (caffeinate prevents idle sleep)
          caffeinate -dimsu &>/dev/null &

      - name: Install and Configure Ngrok
        run: |
          curl -s https://bin.equinox.io/a/bwQ25LiJJwv/ngrok-v3-3.23.3-darwin-arm64.zip -o ngrok.zip
          unzip ngrok.zip
          chmod +x ngrok
          ./ngrok authtoken $NGROK_AUTH_TOKEN

      - name: Start Ngrok Tunnel
        run: |
          max_retries=3
          retry_count=0
          success=false

          while [ $success = false ] && [ $retry_count -lt $max_retries ]; do
            ./ngrok tcp 5900 &
            ngrok_pid=$!

            attempts=0
            max_attempts=10
            ngrok_url=""
            while [ -z "$ngrok_url" ] && [ $attempts -lt $max_attempts ]; do
              sleep 5
              attempts=$((attempts + 1))
              ngrok_url=$(curl -s http://localhost:4040/api/tunnels | jq -r '.tunnels[] | select(.proto == "tcp") | .public_url' 2>/dev/null)
            done

            if [ -z "$ngrok_url" ]; then
              echo "Failed to retrieve Ngrok URL after $max_attempts attempts."
              retry_count=$((retry_count + 1))
              kill $ngrok_pid
              continue
            fi

            ngrok_url=${ngrok_url#tcp://}
            address=${ngrok_url%:*}
            port=${ngrok_url#*:}

            if nc -z -w 5 $address $port; then
              success=true
              echo "VNC Connection Details"
              echo "URL: $address:$port"
              echo "Username: $RDP_USER"
              echo "Password: $RDP_PASS"
            else
              echo "Connection test failed. Retrying..."
              kill $ngrok_pid
              retry_count=$((retry_count + 1))
              sleep 5
            fi
          done

          if [ $success = false ]; then
            echo "Failed to establish a working Ngrok tunnel after $max_retries attempts."
            exit 1
          fi

      - name: Keep Alive
        run: |
          duration=21600  # 6 hours in seconds
          interval=300    # 5 minutes in seconds
          end_time=$(( $(date +%s) + duration ))

          while [ $(date +%s) -lt $end_time ]; do
            if ! pgrep -f "./ngrok tcp 5900" > /dev/null; then
              echo "Ngrok process not found. Exiting workflow."
              exit 1
            fi
            sleep $interval
          done

      - name: Cleanup
        if: always()
        run: |
          if pgrep -f "./ngrok tcp 5900" > /dev/null; then
            echo "Terminating Ngrok process..."
            pkill -f "./ngrok tcp 5900"
          fi
          echo "Cleanup complete."
